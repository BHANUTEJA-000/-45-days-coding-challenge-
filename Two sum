1.Using two pointers:
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res(nums.begin(),nums.end()),ans;
        sort(nums.begin(),nums.end());
        int i=0,j=nums.size()-1;
        while(i<j){
            int sum=nums[i]+nums[j];
            if(target<sum)  j--;
            else if(target>sum) i++;
            else{
                break;
            }
        }
        for(auto k=0;k<res.size();k++){
            if(res[k]==nums[i])
                ans.push_back(k);
            else if(res[k]==nums[j])
                ans.push_back(k);
        }
        return ans; 
    }
};

2.Using Map:
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int,int> index;
        for(auto i=0;i<nums.size();i++){
            if(index.count(target-nums[i])){
                return{index[target-nums[i]],i};
            }
            index[nums[i]]=i;
        }
        return {};
    }
};
